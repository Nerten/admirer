// Code generated by MockGen. DO NOT EDIT.
// Source: loader.go

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockServiceLoader is a mock of ServiceLoader interface.
type MockServiceLoader struct {
	ctrl     *gomock.Controller
	recorder *MockServiceLoaderMockRecorder
}

// MockServiceLoaderMockRecorder is the mock recorder for MockServiceLoader.
type MockServiceLoaderMockRecorder struct {
	mock *MockServiceLoader
}

// NewMockServiceLoader creates a new mock instance.
func NewMockServiceLoader(ctrl *gomock.Controller) *MockServiceLoader {
	mock := &MockServiceLoader{ctrl: ctrl}
	mock.recorder = &MockServiceLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceLoader) EXPECT() *MockServiceLoaderMockRecorder {
	return m.recorder
}

// ForName mocks base method.
func (m *MockServiceLoader) ForName(serviceName string) (Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForName", serviceName)
	ret0, _ := ret[0].(Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForName indicates an expected call of ForName.
func (mr *MockServiceLoaderMockRecorder) ForName(serviceName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForName", reflect.TypeOf((*MockServiceLoader)(nil).ForName), serviceName)
}
