// Code generated by MockGen. DO NOT EDIT.
// Source: spotify.go
//
// Generated by this command:
//
//	mockgen -source spotify.go -destination spotify_mock.go -package spotify
//

// Package spotify is a generated GoMock package.
package spotify

import (
	context "context"
	http "net/http"
	reflect "reflect"

	spotify "github.com/zmb3/spotify/v2"
	gomock "go.uber.org/mock/gomock"
	oauth2 "golang.org/x/oauth2"
)

// MockAuthenticator is a mock of Authenticator interface.
type MockAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockAuthenticatorMockRecorder
}

// MockAuthenticatorMockRecorder is the mock recorder for MockAuthenticator.
type MockAuthenticatorMockRecorder struct {
	mock *MockAuthenticator
}

// NewMockAuthenticator creates a new mock instance.
func NewMockAuthenticator(ctrl *gomock.Controller) *MockAuthenticator {
	mock := &MockAuthenticator{ctrl: ctrl}
	mock.recorder = &MockAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthenticator) EXPECT() *MockAuthenticatorMockRecorder {
	return m.recorder
}

// AuthURL mocks base method.
func (m *MockAuthenticator) AuthURL(state string, opts ...oauth2.AuthCodeOption) string {
	m.ctrl.T.Helper()
	varargs := []any{state}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthURL", varargs...)
	ret0, _ := ret[0].(string)
	return ret0
}

// AuthURL indicates an expected call of AuthURL.
func (mr *MockAuthenticatorMockRecorder) AuthURL(state any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{state}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthURL", reflect.TypeOf((*MockAuthenticator)(nil).AuthURL), varargs...)
}

// Client mocks base method.
func (m *MockAuthenticator) Client(ctx context.Context, token *oauth2.Token) *http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client", ctx, token)
	ret0, _ := ret[0].(*http.Client)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockAuthenticatorMockRecorder) Client(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockAuthenticator)(nil).Client), ctx, token)
}

// Exchange mocks base method.
func (m *MockAuthenticator) Exchange(ctx context.Context, code string, opts ...oauth2.AuthCodeOption) (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, code}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exchange", varargs...)
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exchange indicates an expected call of Exchange.
func (mr *MockAuthenticatorMockRecorder) Exchange(ctx, code any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, code}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exchange", reflect.TypeOf((*MockAuthenticator)(nil).Exchange), varargs...)
}

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AddTracksToLibrary mocks base method.
func (m *MockClient) AddTracksToLibrary(ctx context.Context, ids ...spotify.ID) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range ids {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTracksToLibrary", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTracksToLibrary indicates an expected call of AddTracksToLibrary.
func (mr *MockClientMockRecorder) AddTracksToLibrary(ctx any, ids ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, ids...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTracksToLibrary", reflect.TypeOf((*MockClient)(nil).AddTracksToLibrary), varargs...)
}

// AddTracksToPlaylist mocks base method.
func (m *MockClient) AddTracksToPlaylist(ctx context.Context, playlistID spotify.ID, trackIDs ...spotify.ID) (string, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, playlistID}
	for _, a := range trackIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddTracksToPlaylist", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTracksToPlaylist indicates an expected call of AddTracksToPlaylist.
func (mr *MockClientMockRecorder) AddTracksToPlaylist(ctx, playlistID any, trackIDs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, playlistID}, trackIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTracksToPlaylist", reflect.TypeOf((*MockClient)(nil).AddTracksToPlaylist), varargs...)
}

// CreatePlaylistForUser mocks base method.
func (m *MockClient) CreatePlaylistForUser(ctx context.Context, userID, playlistName, description string, public, collaborative bool) (*spotify.FullPlaylist, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePlaylistForUser", ctx, userID, playlistName, description, public, collaborative)
	ret0, _ := ret[0].(*spotify.FullPlaylist)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePlaylistForUser indicates an expected call of CreatePlaylistForUser.
func (mr *MockClientMockRecorder) CreatePlaylistForUser(ctx, userID, playlistName, description, public, collaborative any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePlaylistForUser", reflect.TypeOf((*MockClient)(nil).CreatePlaylistForUser), ctx, userID, playlistName, description, public, collaborative)
}

// CurrentUser mocks base method.
func (m *MockClient) CurrentUser(ctx context.Context) (*spotify.PrivateUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentUser", ctx)
	ret0, _ := ret[0].(*spotify.PrivateUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentUser indicates an expected call of CurrentUser.
func (mr *MockClientMockRecorder) CurrentUser(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentUser", reflect.TypeOf((*MockClient)(nil).CurrentUser), ctx)
}

// CurrentUsersTracks mocks base method.
func (m *MockClient) CurrentUsersTracks(ctx context.Context, opts ...spotify.RequestOption) (*spotify.SavedTrackPage, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CurrentUsersTracks", varargs...)
	ret0, _ := ret[0].(*spotify.SavedTrackPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentUsersTracks indicates an expected call of CurrentUsersTracks.
func (mr *MockClientMockRecorder) CurrentUsersTracks(ctx any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentUsersTracks", reflect.TypeOf((*MockClient)(nil).CurrentUsersTracks), varargs...)
}

// GetPlaylistItems mocks base method.
func (m *MockClient) GetPlaylistItems(ctx context.Context, playlistID spotify.ID, opts ...spotify.RequestOption) (*spotify.PlaylistItemPage, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, playlistID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPlaylistItems", varargs...)
	ret0, _ := ret[0].(*spotify.PlaylistItemPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlaylistItems indicates an expected call of GetPlaylistItems.
func (mr *MockClientMockRecorder) GetPlaylistItems(ctx, playlistID any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, playlistID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlaylistItems", reflect.TypeOf((*MockClient)(nil).GetPlaylistItems), varargs...)
}

// ReplacePlaylistTracks mocks base method.
func (m *MockClient) ReplacePlaylistTracks(ctx context.Context, playlistID spotify.ID, trackIDs ...spotify.ID) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, playlistID}
	for _, a := range trackIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReplacePlaylistTracks", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplacePlaylistTracks indicates an expected call of ReplacePlaylistTracks.
func (mr *MockClientMockRecorder) ReplacePlaylistTracks(ctx, playlistID any, trackIDs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, playlistID}, trackIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplacePlaylistTracks", reflect.TypeOf((*MockClient)(nil).ReplacePlaylistTracks), varargs...)
}

// Search mocks base method.
func (m *MockClient) Search(ctx context.Context, query string, t spotify.SearchType, opts ...spotify.RequestOption) (*spotify.SearchResult, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query, t}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Search", varargs...)
	ret0, _ := ret[0].(*spotify.SearchResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockClientMockRecorder) Search(ctx, query, t any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query, t}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockClient)(nil).Search), varargs...)
}

// Token mocks base method.
func (m *MockClient) Token() (*oauth2.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token")
	ret0, _ := ret[0].(*oauth2.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Token indicates an expected call of Token.
func (mr *MockClientMockRecorder) Token() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockClient)(nil).Token))
}
