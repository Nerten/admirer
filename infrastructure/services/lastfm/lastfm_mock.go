// Code generated by MockGen. DO NOT EDIT.
// Source: lastfm.go

// Package lastfm is a generated GoMock package.
package lastfm

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	lastfm "github.com/shkh/lastfm-go/lastfm"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// GetAuthRequestUrl mocks base method.
func (m *MockAPI) GetAuthRequestUrl(callback string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthRequestUrl", callback)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAuthRequestUrl indicates an expected call of GetAuthRequestUrl.
func (mr *MockAPIMockRecorder) GetAuthRequestUrl(callback interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthRequestUrl", reflect.TypeOf((*MockAPI)(nil).GetAuthRequestUrl), callback)
}

// GetSessionKey mocks base method.
func (m *MockAPI) GetSessionKey() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionKey")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSessionKey indicates an expected call of GetSessionKey.
func (mr *MockAPIMockRecorder) GetSessionKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionKey", reflect.TypeOf((*MockAPI)(nil).GetSessionKey))
}

// LoginWithToken mocks base method.
func (m *MockAPI) LoginWithToken(token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginWithToken", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoginWithToken indicates an expected call of LoginWithToken.
func (mr *MockAPIMockRecorder) LoginWithToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginWithToken", reflect.TypeOf((*MockAPI)(nil).LoginWithToken), token)
}

// MockUserAPI is a mock of UserAPI interface.
type MockUserAPI struct {
	ctrl     *gomock.Controller
	recorder *MockUserAPIMockRecorder
}

// MockUserAPIMockRecorder is the mock recorder for MockUserAPI.
type MockUserAPIMockRecorder struct {
	mock *MockUserAPI
}

// NewMockUserAPI creates a new mock instance.
func NewMockUserAPI(ctrl *gomock.Controller) *MockUserAPI {
	mock := &MockUserAPI{ctrl: ctrl}
	mock.recorder = &MockUserAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAPI) EXPECT() *MockUserAPIMockRecorder {
	return m.recorder
}

// GetInfo mocks base method.
func (m *MockUserAPI) GetInfo(args map[string]interface{}) (lastfm.UserGetInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo", args)
	ret0, _ := ret[0].(lastfm.UserGetInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockUserAPIMockRecorder) GetInfo(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockUserAPI)(nil).GetInfo), args)
}
